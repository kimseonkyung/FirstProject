
-- 테이블 생성
CREATE TABLE phoneInfo_basic (
    idx NUMBER(6) CONSTRAINT phoneInfo_basic_idx_PK PRIMARY KEY,
    fr_name VARCHAR2(20) NOT NULL,
    fr_phonenumber VARCHAR2(20) NOT NULL,
    fr_email VARCHAR2(20),
    fr_address VARCHAR2(20),
    fr_regdate DATE DEFAULT SYSDATE
);

-- 대학친구 테이블
CREATE TABLE phoneInfo_univ (
    idx NUMBER(6) CONSTRAINT phoneInfo_univ_idx_PK PRIMARY KEY,
    fr_u_major VARCHAR2(20) DEFAULT 'N' NOT NULL,
    fr_u_year NUMBER(1) DEFAULT 1 
    CONSTRAINT phoneInfo_univ_fr_u_year_CK CHECK(fr_u_year BETWEEN 0 AND 5)
    NOT NULL,
    fr_ref NUMBER(7) NOT NULL,
    CONSTRAINT phoneInfo_univ_fr_ref_FK FOREIGN KEY(fr_ref) REFERENCES phoneInfo_basic(idx)
);

-- 회사동료 테이블
CREATE TABLE phoneInfo_com (
    idx NUMBER(6) CONSTRAINT phoneInfo_com_idx_PK PRIMARY KEY,
    fr_c_company VARCHAR2(20) DEFAULT 'N' NOT NULL,
    fr_ref NUMBER(6) NOT NULL,
    CONSTRAINT phoneInfo_com_fr_ref_FK FOREIGN KEY(fr_ref) REFERENCES phoneInfo_basic(idx)
);

-------------------------------------------------------------------------------------------

-- 1. 회사친구의 모든 데이터를 검색하기 위한 질의 (JOIN), 
--    : 이름으로 검색, 전화번호로 검색

SELECT B.FR_NAME "이름", B.FR_PHONENUMBER "전화번호"
FROM PHONEINFO_BASIC B, PHONEINFO_COM C
WHERE B.IDX = C.FR_REF;

-- 2. 대학친구의 모든 데이터를 검색하기 위한 질의 (JOIN)
--    : 이름으로 검색, 전화번호로 검색

SELECT B.FR_NAME "이름", B.FR_PHONENUMBER "전화번호"
FROM PHONEINFO_BASIC B, PHONEINFO_UNIV U
WHERE B.IDX = U.FR_REF AND FR_NAME='홍길순';

-- 3. 회사친구, 대학친구 데이터를 보기위한 각 VIEW를 생성 합시다.

CREATE OR REPLACE VIEW VIEW_COM
AS
SELECT B.IDX, B.FR_NAME, B.FR_PHONENUMBER, B.FR_EMAIL, B.FR_ADDRESS, B.FR_REGDATE ,C.FR_C_COMPANY
FROM PHONEINFO_BASIC B, PHONEINFO_COM C
WHERE B.IDX = C.FR_REF;

CREATE OR REPLACE VIEW VIEW_UNIV
AS
SELECT B.IDX, B.FR_NAME, B.FR_PHONENUMBER, B.FR_EMAIL, B.FR_ADDRESS, B.FR_REGDATE, U.FR_U_MAJOR, U.FR_U_YEAR
FROM PHONEINFO_BASIC B, PHONEINFO_UNIV U
WHERE B.IDX = U.FR_REF;

-- 4. 각테이블의 기본키에 적용할 시퀀스를 생성합시다.

CREATE SEQUENCE BASIC_IDX_SEQ
START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 10000;

CREATE SEQUENCE COM_IDX_SEQ
START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 10000;

CREATE SEQUENCE UNIV_IDX_SEQ
START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 10000;

-- 5. 회사친구, 대학친구의 데이터를 입력하기위한 INSERT 문을 작성합시다.

INSERT INTO PHONEINFO_BASIC VALUES(BASIC_IDX_SEQ.NEXTVAL, '홍길동', '111-1111-1111', 'HONG@NAVER.COM', '서울', SYSDATE);
INSERT INTO PHONEINFO_COM VALUES(COM_IDX_SEQ.NEXTVAL, '비트', BASIC_IDX_SEQ.CURRVAL);

INSERT INTO PHONEINFO_BASIC VALUES(BASIC_IDX_SEQ.NEXTVAL, '홍길순', '222-2222-2222', 'HONG12@NAVER.COM', '인천', '17/11/22');
INSERT INTO PHONEINFO_UNIV VALUES(UNIV_IDX_SEQ.NEXTVAL, '컴퓨터학과', 3, BASIC_IDX_SEQ.CURRVAL);

-- 6. 회사친구, 대학친구 삭제 를 위한 SQL을 작성합시다.
--    테이블 구조 변경
--    ALTER TABLE PHONEINFO_COM DROP COLUMN FR_REF;
--    ALTER TABLE PHONEINFO_COM ADD FR_REF NUMBER(6) NOT NULL
--    CONSTRAINT COM_IDX_FK REFERENCES PHONEINFO_BASIC(IDX) ON DELETE CASCADE;
--
--    ALTER TABLE PHONEINFO_UNIV DROP COLUMN FR_REF;
--    ALTER TABLE PHONEINFO_UNIV ADD FR_REF NUMBER(7) NOT NULL
--    CONSTRAINT UNIV_IDX_FK REFERENCES PHONEINFO_BASIC(IDX) ON DELETE CASCADE;

DELETE FROM PHONEINFO_BASIC WHERE FR_NAME='홍길동';

DELETE FROM PHONEINFO_BASIC WHERE FR_NAME='홍길순';

-- 7. 빠른검색을 위한 인덱스 설정을 합시다. ( 이름, 전화번호 )

CREATE INDEX IDX_PHONEINFO_NAME
ON PHONEINFO_BASIC(FR_NAME);

CREATE INDEX IDX_PHONEINFO_PHONENUMBER
ON PHONEINFO_BASIC(FR_PHONENUMBER);